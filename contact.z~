#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "contact.h"
#include "file.h"
#include "populate.h"


// to check if phone number is vaild
int validphone(char *num)
{
	if(strlen(num) != 10)
		return 0;

	for(int i = 0;i < 10;i++)
	{
		if(!isdigit(num[i]))
		{
			return 0;
		}
	}

	return 1;
}

// to check if email is vaild
int validEmail(char *email)
{
	if(strstr(email, "@") == NULL || strstr(email, ".com") == NULL)
	{
		return 0;
	}
  
	int isLower = 0, isDigit = 0, isSpecial = 0;

	for(int i = 0; email[i]; i++)
	{
		if(islower(email[i]))
		{
			isLower = 1;
		}

		else if(isdigit(email[i]))
		{
			isDigit = 1;
		}

		else if(ispunct(email[i]))
		{
			isSpecial = 1;
		}
	}
	return (isLower && isDigit && isSpecial);
}

//to check for duplicate number and name
int isDuplicate(AddressBook *addressBook,char *name, char *phone)
{
	for(int i = 0; i< addressBook -> contactCount; i++)
	{
		if(strcmp(addressBook->contacts[i].name,name) == 0 || strcmp(addressBook->contacts[i].phone,phone) == 0)
			{
				return 1;
			}
		}
		return 0;
}

void listContacts(AddressBook *addressBook) 
{
    /* Define the logic for print the contacts */
    //printf("%s\n", addressBook->contacts[addressBook->contactCount].name);
    if(addressBook -> contactCount == 0)
    {
	    printf("No contacts to display.\n");
	    return;
    }

    for(int i = 0; i < addressBook -> contactCount; i++)
    {
	    printf("\nContact %d:\n",i + 1);
	    printf("Name : %s\n",addressBook -> contacts[i].name);
            printf("Phone : %s\n",addressBook -> contacts[i].phone);
	    printf("Email : %s\n",addressBook -> contacts[i].email);
    }
}

void initialize(AddressBook *addressBook) {
    addressBook->contactCount = 0;
    populateAddressBook(addressBook);

    // Load contacts from file during initialization (After files)
   // loadContactsFromFile(addressBook);
}

void saveAndExit(AddressBook *addressBook) {
    saveContactsToFile(addressBook); // Save contacts to file
    exit(EXIT_SUCCESS); // Exit the program
}


void createContact(AddressBook *addressBook)
{
	if(addressBook->contactCount >= MAX_CONTACTS)
	{
		printf("Address book is full.\n");
		return;
	}

         Contact *c = &addressBook->contacts[addressBook->contactCount];
    /* Define the logic to create a Contacts */

    // Read the name from the user
    printf("Enter name: ");
    scanf(" %[^\n]", c->name);

    printf("Enter Phone: ");
    scanf(" %s", c->phone);

    if(!validphone(c -> phone))
    {
	    printf("Invalid phone number.\n");
	    printf("Enter only 10 digits :");
	    scanf(" %s", c->phone);
    }
   
    printf("Enter email: ");
    scanf(" %s", c->email);

    if(!validEmail(c->email))
    {
	    printf("Invaild email address.\n");
	    printf("Email requires'@' and '.com':");
	    scanf(" %s", c->email);
    }

    if(isDuplicate(addressBook, c->name, c->phone))
    {
	    printf("Duplicate contact already exists.\n");
	    return;
    }

    addressBook->contactCount++;
    printf("Contact added successfully.\n");

}

void searchContact(AddressBook *addressBook) 
{
    /* Define the logic for search */
	char search[50];
	printf("Enter the name to search: ");
	scanf(" %[^\n]", search);

	for(int i = 0; i < addressBook->contactCount; i++)
	{
		if(strcmp(addressBook->contacts[i].name, search) == 0)
		{
			printf("Name : %s\n",addressBook->contacts[i].name);
	                printf("Name : %s\n",addressBook->contacts[i].phone);
	                printf("Name : %s\n",addressBook->contacts[i].email);
		        return;
		}
	}

	printf("Contact not found.\n");
}

void editContact(AddressBook *addressBook)
{
    /* Define the logic for Editcontact */
	char search[50];
	int opt;
	printf("Enter the name to edit: ");
	scanf(" %[^\n]", search);

	for(int i = 0; i < addressBook->contactCount; i++)
	{
		if(strcmp(addressBook->contacts[i].name, search) == 0)
		{
			printf("Editing Contact: %s\n",addressBook->contacts[i].name);
		
			printf("Select what to edit: \n");
			printf("1. Name\n");
			printf("2.Phone NUmber\n");
			printf("3. Email\n");
			printf("Enter option: ");
			scanf("%d",&opt);

			switch(opt)
			{
				case 1:
					printf("Enter the name: ");
					scanf(" %[^\n]", addressBook->contacts[i].name);
					break;

				case 2:
					printf("Enter the new Phone: ");
					scanf(" %s",addressBook->contacts[i].phone);
				
					if(!validphone(addressBook->contacts[i].phone))
					{
						printf("Invalid phone number.\n");
						printf("Enter only 10 digits :");
						scanf(" %s", addressBook->contacts[i].phone);
					}
					break;

				case 3:
					printf("Enter email: ");
					scanf(" %s", addressBook->contacts[i].email);
		       
					if(!validEmail(addressBook->contacts[i].email))
					{
			                	printf("Invaild email address.\n");
			                	printf("Email requires'@' and '.com':");
			                	scanf(" %s", addressBook->contacts[i].email);
		                	}
					break;

				default:
					printf("Invalid option\n");
					return;
			}

			printf("Contact updated SUCCESSFULLY\n");
			return;
		}
	}

	printf("  CONTACT NOT FOUND.\n");
}

void deleteContact(AddressBook *addressBook)
{
    /* Define the logic for deletecontact */

}
